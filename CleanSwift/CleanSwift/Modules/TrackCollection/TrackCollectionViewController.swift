//
//  TrackCollectionViewController.swift
//  CleanSwift
//
//  Created by Henry on 9/11/17.
//  Copyright (c) 2017 Henry Tsai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BusinessLogic
import ITunesFeed

protocol TrackCollectionDisplayLogic: class {
    func displayList(viewModel: TrackCollectionViewController.ViewModel)
    func displayItemDetail(url: URL)
}

class TrackCollectionViewController: UICollectionViewController {
    struct ViewModel {
        struct Item {
            var itemId: String
            var title: String
            var subtitle: String
            var imageURL: URL?
        }
        private(set) var items: [Item]
    }
	var interactor: ListBusinessLogic?
	var router: (NSObjectProtocol & TrackCollectionRoutingLogic & TrackCollectionDataPassing)?
    var viewModel: ViewModel = ViewModel(items: [ViewModel.Item]()) {
        didSet {
            collectionView?.reloadData()
        }
    }

    // MARK: View lifecycle
  	override func viewDidLoad() {
   		super.viewDidLoad()
        let request = List.FetchData.Request()
        interactor?.fetchData(request: request)
  	}
}

extension TrackCollectionViewController {
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return viewModel.items.count
    }
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "TrackCollectionViewCell", for: indexPath) as? TrackCollectionViewCell else { return UICollectionViewCell() }
        let item = viewModel.items[indexPath.item]
        cell.updateCell(with: item)
        return cell
    }
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let item = viewModel.items[indexPath.row]
        interactor?.selectItme(itemId: item.itemId)
    }
}

extension TrackCollectionViewController: TrackCollectionDisplayLogic {
    func displayList(viewModel: TrackCollectionViewController.ViewModel) {
        self.viewModel = viewModel
    }
    func displayItemDetail(url: URL) {
        router?.routeToItemDetail(url: url)
    }
}


