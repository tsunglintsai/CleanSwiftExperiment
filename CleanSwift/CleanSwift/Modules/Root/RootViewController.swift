//
//  RootViewController.swift
//  CleanSwift
//
//  Created by Henry on 9/10/17.
//  Copyright (c) 2017 Henry Tsai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BusinessLogic
import Persistence

protocol RootDisplayLogic: class {
    func displayLogin()
    func displayMain()
}

class RootViewController: UIViewController {
	var interactor: RootBusinessLogic?
	var router: (NSObjectProtocol & RootRoutingLogic)?

	// MARK: Object lifecycle
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
    }
  
  	required init?(coder aDecoder: NSCoder) {
	    super.init(coder: aDecoder)
    	setup()
  	}
  
  	// MARK: Setup
  	private func setup() {
	    let viewController = self
    	let interactor = RootInteractor()
    	let presenter = RootPresenter()
    	let router = RootRouter()
    	viewController.interactor = interactor
    	viewController.router = router
    	interactor.presenter = presenter
    	presenter.viewController = viewController
    	router.viewController = viewController
        interactor.entityManagerCreationClosure = {
            return EntityManagerWithUserDefault()
        }
    }

  	// MARK: View lifecycle
  	override func viewDidLoad() {
   		super.viewDidLoad()
        let request = Root.InitApplication.Request()
        interactor?.initApplication(request: request)
  	}
}

extension RootViewController: RootDisplayLogic {
    func displayLogin() {
        router?.routeToLogin()
    }
    func displayMain() {
        router?.routeToMain()
    }
}
