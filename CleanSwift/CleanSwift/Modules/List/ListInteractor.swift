//
//  ListInteractor.swift
//  CleanSwift
//
//  Created by Henry on 9/9/17.
//  Copyright (c) 2017 Henry Tsai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBusinessLogic {
    func fetchData(request: List.FetchData.Request)
    func selectItme(itemId: String)
}

protocol ListDataStore {
    var selectedItemURL: URL? { get set }
}

class ListInteractor: ListDataStore {
    var presenter: ListPresentationLogic?
    var worker: ListWorker?
    var selectedItemURL: URL?
}

extension ListInteractor: ListBusinessLogic {
    func fetchData(request: List.FetchData.Request) {
        worker = ListWorker()
        worker?.delegate = self
        worker?.fetchData()
    }
    
    func selectItme(itemId: String) {
        guard let track = worker?.result.first(where: { (track) -> Bool in
            track.trackId == itemId
        }) else { return }
        selectedItemURL = URL(string: track.detailURL)
        presenter?.presentTrack(track: track)
    }
}

extension ListInteractor: ListWorkerDelegate {
    func didFetchedData() {
        guard let tracks = worker?.result else { return }
        let response = List.FetchData.Response(tracks: tracks)
        presenter?.presentList(response: response)
    }
}
